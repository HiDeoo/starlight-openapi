---
import StarlightPage from '@astrojs/starlight/components/StarlightPage.astro'
import OpenAPIParser from '@readme/openapi-parser'
import type { InferGetStaticPropsType } from 'astro'

import { getSchemaStaticPaths } from '../libs/route'
import { getPageProps } from '../libs/starlight'

import Operation from './operation/Operation.astro'
import Overview from './Overview.astro'

export const prerender = true

export function getStaticPaths() {
  return getSchemaStaticPaths()
}

type Props = InferGetStaticPropsType<typeof getStaticPaths>

const { schema, type } = Astro.props

const NUMBER_OF_REPEAT_CIRCULAR = schema.config?.numberOfRepeatCircular ?? 1

function removeCircularReferences(obj: any, props: { nested?: number; ancestors?: Map<any, any> } = {}) {
  const { ancestors = new Map(), nested = 0 } = props || {}
  if (nested > NUMBER_OF_REPEAT_CIRCULAR) {
    return obj
  }
  if (obj !== null && typeof obj === 'object') {
    if (ancestors.has(obj)) {
      if (nested < NUMBER_OF_REPEAT_CIRCULAR) {
        return removeCircularReferences(structuredClone(obj), { nested: nested + 1 })
      }

      return {
        type: 'circular of parent',
        description: 'circular of parent',
      }
    }

    ancestors.set(obj, null)

    for (const key of Object.keys(obj)) {
      const value = obj[key]
      if (typeof value === 'object' && value !== null) {
        obj[key] = removeCircularReferences(value, {
          ancestors: new Map(ancestors),
          nested: nested,
        })
      }
    }

    ancestors.delete(obj)
  }

  return obj
}

if (schema.documentDereferenced !== true) {
  schema.document = removeCircularReferences(await OpenAPIParser.dereference(schema.document))
  schema.documentDereferenced = true
}

const isOverview = type === 'overview'
const SEPARATOR = '/'
let title = `${schema.config.label}`

if (isOverview) {
  title = `${title} ${SEPARATOR} Overview`
} else {
  if (Astro.props.operation?.tag) {
    title = `${title} ${SEPARATOR} ${Astro.props.operation.tag}`
  }
  title = `${title} ${SEPARATOR} ${Astro.props.operation.title}`
}

const frontmatter = {
  ...Astro.props?.frontmatter,
  title,
}
---

<StarlightPage {...getPageProps(frontmatter, schema, isOverview ? undefined : Astro.props.operation)}>
  {isOverview ? <Overview {schema} /> : <Operation {schema} operation={Astro.props.operation} />}
</StarlightPage>
