---
import { getProperties, isAdditionalPropertiesWithSchemaObject, type SchemaObject } from '../../libs/schemaObject'
import Key from '../Key.astro'
import Tags from '../Tags.astro'

import Schema from './SchemaObject.astro'
import SchemaObjectAllOf from './SchemaObjectAllOf.astro'
import SchemaObjectObjectProperties from './SchemaObjectObjectProperties.astro'

interface Props {
  nested: boolean
  parents?: SchemaObject[]
  schemaObject: SchemaObject
}

const { nested, parents = [], schemaObject } = Astro.props

const properties = getProperties(schemaObject)
---

<details class:list={[!nested && 'root']} open={!nested}>
  <summary>
    <span class="type">object</span>
  </summary>
  <Tags
    tags={[
      schemaObject.minProperties && `>= ${schemaObject.minProperties} properties`,
      schemaObject.maxProperties && `<= ${schemaObject.maxProperties} properties`,
    ]}
  />
  <SchemaObjectObjectProperties parents={[...parents, schemaObject]} {properties} required={schemaObject.required} />
  <SchemaObjectAllOf {nested} {parents} {schemaObject} />
  {
    schemaObject.additionalProperties && (
      <Key additional name="key">
        {schemaObject.additionalProperties === true ? (
          <div class="any">any</div>
        ) : isAdditionalPropertiesWithSchemaObject(schemaObject.additionalProperties) ? (
          <Schema parents={[...parents, schemaObject]} schemaObject={schemaObject.additionalProperties} />
        ) : null}
      </Key>
    )
  }
</details>

<style>
  details {
    display: block;
  }

  details details {
    border-inline-start: 1px solid var(--sl-color-gray-4);
    padding-inline-start: 0.8rem;
  }

  details:not([open]):hover,
  details:has(> summary:hover) {
    border-color: var(--sl-details-border-color--hover);
  }

  details[open] > summary {
    margin-bottom: 0.8rem;
  }

  summary {
    align-items: center;
    cursor: pointer;
    display: flex;
    list-style-type: none;
    margin-inline-start: -0.5rem;
    padding-inline-start: 0.5rem;
    user-select: none;
  }

  summary:hover {
    color: var(--sl-color-gray-2);
  }

  details.root > summary {
    display: none;
  }

  summary::marker,
  summary::-webkit-details-marker {
    display: none;
  }

  summary::before {
    --sl-details-marker-size: 1.25rem;

    background-color: currentColor;
    content: '';
    display: inline-block;
    height: var(--sl-details-marker-size);
    margin-inline: calc((var(--sl-details-marker-size) / 4) * -1) 0.25rem;
    -webkit-mask-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath d='M14.8 11.3 10.6 7a1 1 0 1 0-1.4 1.5l3.5 3.5-3.5 3.5a1 1 0 0 0 0 1.4 1 1 0 0 0 .7.3 1 1 0 0 0 .7-.3l4.2-4.2a1 1 0 0 0 0-1.4Z'/%3E%3C/svg%3E%0A");
    mask-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath d='M14.8 11.3 10.6 7a1 1 0 1 0-1.4 1.5l3.5 3.5-3.5 3.5a1 1 0 0 0 0 1.4 1 1 0 0 0 .7.3 1 1 0 0 0 .7-.3l4.2-4.2a1 1 0 0 0 0-1.4Z'/%3E%3C/svg%3E%0A");
    -webkit-mask-repeat: no-repeat;
    mask-repeat: no-repeat;
    vertical-align: middle;
    width: var(--sl-details-marker-size);
  }
  @media (prefers-reduced-motion: no-preference) {
    summary::before {
      transition: transform 0.2s ease-in-out;
    }
  }
  details[open] > summary::before {
    transform: rotateZ(90deg);
  }
  [dir='rtl'] summary::before {
    transform: rotateZ(180deg);
  }

  .type {
    color: var(--sl-color-text-accent);
    font-weight: 600;
    margin-inline-end: 0.3rem;
  }

  .any {
    color: var(--sl-color-text-accent);
    font-weight: 600;
    margin-inline-end: 0.3rem;
  }
</style>
